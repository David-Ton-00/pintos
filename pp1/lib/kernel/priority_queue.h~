#ifndef __LIB_KERNEL_LIST_H
#define __LIB_KERNEL_LIST_H

/* 
  Priority queue is built on doubly linked list. As for imformation of doubly linked list, please turn to list.h 
*/

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

/* List element. */
struct list_elem 
  {
    struct list_elem *prev;     /* Previous list element. */
    struct list_elem *next;     /* Next list element. */

    struct list_elem *parent;   /* Parent elememt */
    struct list_elem *left;     /* Left child element */
    struct list_elem *right;    /* Right child element */

     /* add id to find an element's parent and children 
        the head of list has the default id 0 
        and everyafter inserted element has id one larger than
        that of its previous element
      */
    int id;                   

    /* provide an interface for list_less_func may be a better idea for 
       universal max heap while keeping its priority may simplify
       the implementation
    */
    int priority;
  };

/* List. */
struct list 
  {
    struct list_elem head;      /* List head. */
    struct list_elem tail;      /* List tail. */
  };

/* Converts pointer to list element LIST_ELEM into a pointer to
   the structure that LIST_ELEM is embedded inside.  Supply the
   name of the outer structure STRUCT and the member name MEMBER
   of the list element.  See the big comment at the top of the
   file for an example. */
#define list_entry(LIST_ELEM, STRUCT, MEMBER)           \
        ((STRUCT *) ((uint8_t *) &(LIST_ELEM)->next     \
                     - offsetof (STRUCT, MEMBER.next)))

void list_init (struct list *);

/* List traversal. */
struct list_elem *list_begin (struct list *);
struct list_elem *list_next (struct list_elem *);
struct list_elem *list_end (struct list *);

struct list_elem *list_rbegin (struct list *);
struct list_elem *list_prev (struct list_elem *);
struct list_elem *list_rend (struct list *);

struct list_elem *list_head (struct list *);
struct list_elem *list_tail (struct list *);

/* List insertion. */
void list_insert (struct list_elem *, struct list_elem *);
void list_splice (struct list_elem *before,
                  struct list_elem *first, struct list_elem *last);
void list_push_front (struct list *, struct list_elem *);
void list_push_back (struct list *, struct list_elem *);

/* List removal. */
struct list_elem *list_remove (struct list_elem *);
struct list_elem *list_pop_front (struct list *);
struct list_elem *list_pop_back (struct list *);

/* List elements. */
struct list_elem *list_front (struct list *);
struct list_elem *list_back (struct list *);

/* List properties. */
size_t list_size (struct list *);
bool list_empty (struct list *);

/* Miscellaneous. */
void list_reverse (struct list *);

/* Compares the value of two list elements A and B, given
   auxiliary data AUX.  Returns true if A is less than B, or
   false if A is greater than or equal to B. */
typedef bool list_less_func (const struct list_elem *a,
                             const struct list_elem *b,
                             void *aux);

/* Operations on lists with ordered elements. */
void list_sort (struct list *,
                list_less_func *, void *aux);
void list_insert_ordered (struct list *, struct list_elem *,
                          list_less_func *, void *aux);
void list_unique (struct list *, struct list *duplicates,
                  list_less_func *, void *aux);

/* Max and min. */
struct list_elem *list_max (struct list *, list_less_func *, void *aux);
struct list_elem *list_min (struct list *, list_less_func *, void *aux);

/* try to implement priority queue on the double linked list 
   this is a full implementation so some of the functions may not be 
   needed by a priority queue 
*/
struct list_elem *parent(struct list_elem *elem);
struct list_elem *left(struct list_elem *elem);
struct list_elem *right(struct list_elem *elem);
void max_heapify(struct list_elem *elem);
void build_max_heap(struct list *list);
struct list_elem *heap_maximum(struct list *list);
struct list_elem *heap_extract_max(struct list *list);
void heap_increase_key(struct list_elem *elem, int key);
void max_heap_insert(struct list *list, struct list_elem *elem);
void exchange(struct list_elem *fst, struct list_elem *snd);
void percolate(struct list_elem *elem);

#endif /* lib/kernel/list.h */
